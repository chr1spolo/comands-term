Si usamos el comando man seguido del nombre del comando del cual que queremos saber m√°s, tenemos como resultado una documentaci√≥n bastante detallada junto con todas sus banderas disponibles y ejemplos de uso. Man no depende de internet y muy √∫til para descubrir nuevos comandos.

Monitoreo de procesos desde la terminal
La arquitectura de un sistema operativo Linux / *Nix nos permite identificar en qu√© carpeta se encuentran todos esos comandos ejecutables que hemos estado usando, basta con ejecutar el comando:

echo $PATH

Adem√°s con which NombreDelComando, podemos obtener el directorio donde ese comando en especifico es ejecutado. Ejemplo:

which cat

top : Es un comando que nos permite saber, segundo a segundo, que procesos est√°n corriendo en nuestro ordenador.

PID (Process ID): es un identificador num√©rico que se le asigna a cada proceso que se est√° ejecutando en nuestro ordenador.

Para saber ese PID, en nuestro proceso, agregamos un &.

Teniendo ese PID, podemos matar ese proceso con el comando:

kill -9 PID

Volviendo a los procesos, existe una forma de identificar los procesos que se han estado ejecutando:

ps -wA

Les comparto la documentaci√≥n de which, top y kill en Ubuntu

http://manpages.ubuntu.com/manpages/xenial/en/man1/which.1.html

http://manpages.ubuntu.com/manpages/xenial/en/man1/top.1.html

http://manpages.ubuntu.com/manpages/xenial/en/man1/kill.1.html

Les recomiendo instalen htop es un gestor de procesos como top solo que muestra la informaci√≥n de una manera m√°s clara y agradable.

Diferentes formas de usar comandos:

Directamente: no se sabe que hace pero se ejecuta, en caso de algun comando que realice acciones, comandos como bc(basic calculator), directamente abre una calculadora

Con baderas: si lleva un guion, es una bandera, si no lleva despues del espacio, es una bandera prendida, si lleva doble guion es una bandera entera y no una abreviacion como la que se usa con un solo guion por estandar se usa doble guion y en vez de espacio, igual ( = )

con parametros: directorios, archivos, etc; con su respectiva extension en caso de algun archivo.

con banderas y parametros.

Standard Input, Standard Output y Standard Error
Independiente del lenguaje, cualquier programa tiene un flujo de entrada de datos, un flujo de salida y un modo de capturar errores.

En la terminal, podemos tener este mismo flujo de datos gracias a ‚Äú<‚Äù y ‚Äú>‚Äù.

Nuestro ejemplo fue:

bc -q < operaciones.bc > resultado

De un archivo llamado operaciones.bc, abrelo usando bc, y el resultado, mandalo a resultado

STDIN = 0
STDOUT = 1
STDERR = 2

‚Äú| pipe‚Äù = Manda el STDOUT o el resultado a otro comando o programa:
cat operaciones.bc | bc -q

‚Äú> mayor que‚Äù = Imprime el STDOUT a un archivo
operaciones.bc > resultados.txt

‚Äú< menor que‚Äù = Lo mismo que el pipe, pero sin necesidad de ejecutar otro comando
bc -q < operaciones.bc

Excelente, muy √∫til! Muchas Gracias @beco

Mi resumen, con otro ejemplo similar, tal vez m√°s sencillo:

Creamos un archivo por ejemplo suma.txt que contiene 1 sola linea que dice 5+5

Entonces si leemos con cat el archivo suma.txt escribiendo cat suma.txt nos muestra en la salida o StandarOutput: 5+5

As√≠ que si escribimos cat suma.txt | bc le estamos pasamos esa salida de cat como entrada o StandardInput a bc (la calculadora) √©sta procesa la operaci√≥n y nos muestra como salida final 10 (obviamente el resultado de la suma)

Finalmente si escribimos cat suma.txt | bc > resultado.txt nos guardar√° el resultado de la suma (la Salida de bc) en resultado.txt

Lo mismo de arriba lo podemos hacer con: bc < suma.txt que es como meter o pasar la salida de suma.txt a bc

Y escribiendo bc < suma.txt > resultado.txt agregamos la funcionalidad de guardar la salida de bc en el archivo resultado.txt (Osea 10)

Con esto b√°sicamente estamos manipulando/controlando las entradas y salidas de procesos o programas desde la terminal! Which is awesome! üòÑ

echo $?: imprimir√° el error status del anterior proceso, si devuelve 0 fue ejecutado correctamente